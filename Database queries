# SQL Practice Queries (From Easy to Advanced)

This is a list of useful SQL queries to help you learn and practice SQL, starting from the easiest to more advanced ones.

---

## ðŸ”¹ Basic Count and Selection

-- Count all rows
SELECT COUNT(*) FROM customers;

-- Count only non-null customer_id
SELECT COUNT(customer_id) FROM customers;

-- Count distinct countries
SELECT COUNT(DISTINCT Country) FROM Customers;

-- Select all customers
SELECT * FROM customers;


---

## ðŸ”¹ Filtering by Ranges and Conditions

-- Price between 1 and 5
SELECT * FROM customers WHERE price BETWEEN 1 AND 5;

-- Price NOT between 1 and 5
SELECT * FROM customer WHERE price NOT BETWEEN 1 AND 5;

-- Orders within a date range
SELECT * FROM orders WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';


---

## ðŸ”¹ Pattern Matching (LIKE)

-- Names ending with 's'
SELECT * FROM customers WHERE name LIKE '%s';

-- Names starting with 's'
SELECT * FROM customers WHERE name LIKE 's%';

-- Names containing 's'
SELECT * FROM customers WHERE name LIKE '%s%';

-- Name has any char, then 'r'
SELECT * FROM customer WHERE name LIKE '_r%';

-- Name starts with 'a' and at least 2 characters
SELECT * FROM customers WHERE name LIKE 'a_%';

-- Name starts with 'a' and ends with 'o'
SELECT * FROM customers WHERE name LIKE 'a%o';


---

## ðŸ”¹ Using IN and NOT IN

-- Name not in abanoub or gaid
SELECT * FROM customer WHERE name NOT IN ('abanoub', 'gaid');

-- Country exists in suppliers table
SELECT * FROM customers WHERE Country IN (SELECT Country FROM Suppliers);


---

## ðŸ”¹ Other Filters

-- Name not equal to 'abanoub'
SELECT * FROM customers WHERE name <> 'abanoub';

-- Price greater than or equal 100
SELECT * FROM products WHERE price >= 100;

-- Invalid example (wrong logic): checking name in prices
-- SELECT * FROM customers WHERE price IN ('abanoub','gaid');

-- Name is 'abanoub' AND 'gaid' (will always return 0)
SELECT * FROM customer WHERE name = 'abanoub' AND name = 'gaid';

-- Name is 'abanoub' OR 'gaid'
SELECT * FROM customer WHERE name = 'abanoub' OR name = 'gaid';

-- Name is NOT 'abanoub'
SELECT * FROM customer WHERE NOT name = 'abanoub';

-- Name is not 'gaid' and not 'abanoub'
SELECT * FROM customer WHERE name <> 'gaid' AND name <> 'abanoub';

---

## ðŸ”¹ Sorting and NULL Checking

-- Order by name descending, then city ascending
SELECT * FROM customers ORDER BY name DESC, city ASC;

-- Name is null
SELECT * FROM customers WHERE name IS NULL;

-- Name is NOT null
SELECT * FROM customers WHERE name IS NOT NULL;

---

## ðŸ”¹ Aggregation Functions

-- Minimum price
SELECT MIN(price) FROM products;

-- Maximum price
SELECT MAX(price) FROM products;

-- Maximum price with alias
SELECT MAX(price) AS total FROM products;

-- Average price
SELECT AVG(price) AS average FROM products;

-- Rounded average price to 2 decimals
SELECT ROUND(AVG(price), 2) AS average_price FROM products;

-- Count cities
SELECT COUNT(city) FROM customers;

---

## ðŸ”¹ Pagination

-- Skip 3 rows, then get next 3 rows
SELECT * FROM customer LIMIT 3 OFFSET 3;

Lesson number 3 
---

INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);

INSERT INTO table_name VALUES (value1, value2, value3, ...);

UPDATE actor SET first_name WHERE actor_id = 1

DELETE FROM actor WHERE actor_id = 12

Aggregate Functions

SELECT MIN(column_name) FROM table_name WHERE condition;

SELECT MAX(column_name) FROM table_name WHERE condition;

SELECT AVG(column_name) FROM table_name WHERE condition;

SELECT SUM(column_name) FROM table_name WHERE condition;

SELECT COUNT(column_name) FROM table_name WHERE condition;

---
Lesson number 4 
-- UNION
SELECT first_name,last_name from actor
UNION  
SELECT first_name, last_name FROM customer LIMIT 100


SELECT first_name,last_name from actor
UNION ALL
SELECT first_name, last_name FROM customer LIMIT 100

--GROUP BY

SELECT rating, count(*) FROM film
GROUP BY rating LIMIT 100
--HAVING
SELECT rating, count(*) as totalFilmInRating FROM film
GROUP BY rating
HAVING count(*) > 150 LIMIT 100
